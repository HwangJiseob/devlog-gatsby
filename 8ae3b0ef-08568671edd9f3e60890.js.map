{"version":3,"sources":["webpack:///./src/components/mdx/default.js"],"names":["post_width","layout","posts","max_width","main","Prism","children","className","wrapper","container","code_title","lineNo","replace","split","lang","title","language","css","defaultProps","code","trim","theme","vsDark","style","tokens","getLineProps","getTokenProps","margin","background","height","padding","map","line","i","key","token","transpileMDXorNot","target","type","displayName","__html","micromark","extensions","gfmSyntax","htmlExtensions","gfmHtml","Blockquote","nightSky","ChineseViolet","components","inlineCode","openColor","gray1","a","hr","Code","script","Youtube","props","url","src","ratio","num","NaN","parseFloat","isRatio","arr","includes","pop","push","join","isWatchSrc","youtube","iframe","frameBorder","allow","allowFullScreen","Gist","InlineMath","BlockMath","Columns","columns","vr","filter","child","mdxType","Column","result","results","Array","isArray","dangerouslySetInnerHTML","table","length","blockquote"],"mappings":"04BAwBA,IAAMA,EAAaC,IAAOC,MAAMC,U,GACdF,IAAOG,KAAKD,U,qWA4CxBE,EAAQ,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACnBC,EAAO,EAGPC,EAAS,EAOTC,EAAU,EAUVC,EAAM,EArB6B,EA2BnBJ,EAAUK,QAAQ,YAAa,IAAIC,MAAM,WAAxDC,EA3BkC,KA2B5BC,EA3B4B,KA4BnCC,EAAWF,GAAQ,GACzB,OACE,mBAAKG,IAAKT,GACR,YAAC,IAAD,eAAeU,IAAf,CACEC,KAAMb,EAASc,OACfJ,SAAUA,EACVK,MAAOC,OAEN,gBAAEf,EAAF,EAAEA,UAAWgB,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,cAA1C,OACC,8BACCX,GAED,mBAAKQ,MAAK,OAAMA,GAAN,IAAaI,OAAQ,YAAaC,WAAY,UAAWC,OAAQ,WACzE,mBAAKZ,IAAKP,GACPK,IAIL,mBAAKR,UAAWA,EAAWgB,MAAK,OAAMA,GAAN,IAAaO,QAAS,OAAQH,OAAQZ,EAAQ,YAAc,OAC1FE,IAAKR,GAEJe,EAAOO,KAAI,SAACC,EAAMC,GAAP,OACV,+BAAKC,IAAKD,GAAOR,EAAa,CAACO,OAAME,IAAKD,KACxC,oBAAMhB,IAAKN,GAASsB,EAAI,GACvBD,EAAKD,KAAI,SAACI,EAAOD,GAAR,OACR,gCAAMA,IAAKA,GAASR,EAAc,CAACS,QAAOD,wB,qYAoFtDE,EAAoB,SAACC,GAAY,IAAD,EACpC,OAAIA,SAAD,UAACA,EAAQC,YAAT,OAAC,EAAcC,YAOTF,EAFA,CAAEG,OAJMC,IAAUJ,EAAQ,CAC/BK,WAAY,CAACC,OACbC,eAAgB,CAACC,S,kJAuDjBC,EAAU,gIAKAC,IAASC,cALT,6BAOYD,IAASC,cAPrB,KA2CHC,EAAa,CACxBC,WAlCc,8HAMAH,IAASC,cANT,UAOLG,IAAUC,MAPL,uBAmCdC,EAxBQ,oEAECN,IAASC,cAFV,0CAImBD,IAASC,cAJ5B,gMASGG,IAAUC,MATb,qBAUcL,IAASC,cAVvB,MAyBRM,GAXQ,mNAYRnC,KAAMd,EACNkD,KAnLW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQxC,EAAe,EAAfA,SACtB,OAAO,YAACX,EAAD,CAAOE,UAAWS,GAAWwC,EAAOpC,SAmL3CqC,QAhLc,SAACC,GACf,IAAMC,EAAMD,EAAMC,IAAMD,EAAMC,IAAMD,EAAME,IACpCC,EAAQH,EAAMG,MAjGN,SAACA,GACf,IAAIC,EACJ,cAAcD,GACZ,IAAK,SAEH,GAASE,OADTD,EAAME,WAAWH,IAEf,OAAO,EAET,MACF,IAAK,SACHC,EAAMD,EAKV,OAAGC,GAAO,EACD,EACCA,GAAO,EACRA,EACCA,GAAO,IACRA,EAAM,IAEN,EA2EmBG,CAAQP,EAAMG,OAAS,EAC7CD,EAlHW,SAACD,GAClB,IACMO,EAAMP,EAAI9C,MAAM,KACtB,GAAGqD,EAAIC,SAFQ,mBAES,CACtB,GAAGD,EAAIC,SAAS,SACd,OAAOR,EAEP,IAAMtB,EAAS6B,EAAIE,MAEnB,OADAF,EAAIG,KAAKhC,EAAOzB,QAAQ,WAAY,WAC7BsD,EAAII,KAAK,KAGlB,OAAO,EAsGGC,CAAWZ,GAGjBnD,EAAO,EAKPC,EAAYQ,YAAH,6BAEKjB,EAFL,MAEqB6D,EAFrB,SAITW,EAAO,EAOPC,EAAM,EAOZ,OAAGb,EAEC,mBAAK3C,IAAKT,GACR,mBAAKS,IAAKR,GACR,mBAAKQ,IAAKuD,GACR,sBACEvD,IAAKwD,EACLb,IAAKA,EACLc,YAAY,IACZC,MAAM,2FACNC,iBAAe,OAOlB,yBAmITC,KAAMA,IACNC,WAAYA,aACZC,UAAWA,YACXC,QAlIc,SAAC,GAAsB,IAApB1E,EAAmB,EAAnBA,SAEX2E,GAF8B,EAATC,GAEX5E,EAAS6E,QAAO,SAAAC,GAAU,IAAD,EACvC,MAAiC,YAA1BA,SAAA,UAAAA,EAAO1B,aAAP,eAAc2B,aAEjB5E,EAAS,EAMf,OACE,mBAAKQ,IAAKR,GACPwE,IAsHLK,OArGa,SAAC,GAAkB,IAAD,IAC3BC,EAAQC,EADIlF,EAAe,EAAfA,SAShB,OAPGmF,MAAMC,QAAQpF,GACfkF,EAAUlF,EAASyB,KAAI,SAAAqD,GACrB,OAAOhD,EAAkBgD,MAG3BG,EAASnD,EAAkB9B,GAG3B,uBAEIiF,GAAM,UAAIA,SAAJ,iBAAI,EAAQjD,YAAZ,OAAI,EAAcC,YACtB,8BAAGgD,GACH,mBAAKI,wBAAyBJ,IAGhCC,GAAWA,EAAQzD,KAAI,SAAAwD,GAAW,IAAD,EAC/B,OAAOA,SAAA,UAAAA,EAAQjD,YAAR,SAAcC,YACnB,8BAAGgD,GACH,mBAAKI,wBAAyBJ,SAkFxCK,MA5EY,SAAC,GAAgB,IAAD,UAAdtF,EAAc,EAAdA,SAERG,GADK,UAAGH,EAAS,UAAZ,iBAAG,EAAaoD,aAAhB,iBAAG,EAAoBpD,gBAAvB,iBAAG,EAA8BoD,aAAjC,iBAAG,EAAqCpD,gBAAxC,OAAG,EAA+CuF,OAC9C,GAMTD,EAAK,EAIX,OACE,mBAAK3E,IAAKR,GACR,qBAAOQ,IAAK2E,GACTtF,KA8DPwF,WAAWhD","file":"8ae3b0ef-08568671edd9f3e60890.js","sourcesContent":["/** @jsx jsx */\r\nimport React from 'react'\r\nimport { layout, nightSky, openColor  } from '../../libs/config'\r\nimport { jsx, css } from '@emotion/react'\r\nimport styled from '@emotion/styled'\r\nimport Highlight, { defaultProps } from 'prism-react-renderer'\r\nimport vsDark from 'prism-react-renderer/themes/vsDark';\r\nimport Gist from 'super-react-gist'\r\n\r\nimport { InlineMath, BlockMath } from 'react-katex';\r\n\r\nimport micromark from 'micromark'\r\nimport gfmSyntax from 'micromark-extension-gfm'\r\nimport gfmHtml from 'micromark-extension-gfm/html'\r\n// import mdxSyntax from 'micromark-extension-mdx'\r\n// import jsxSyntax from 'micromark-extension-mdx-jsx'\r\n\r\n// import unified from 'unified'\r\n// import remarkParse from 'remark-parse'\r\n// import remarkStringify from 'remark-stringify'\r\n\r\n// import remarkMdx from 'remark-mdx'\r\n// // import mdxAstToMdxHast from '@mdx-js/mdx/mdx-ast-to-mdx-hast'\r\n\r\nconst post_width = layout.posts.max_width\r\nconst max_width = layout.main.max_width\r\n\r\nconst isWatchSrc = (url) => {\r\n  const domain = \"www.youtube.com\"\r\n  const arr = url.split('/')\r\n  if(arr.includes(domain)){\r\n    if(arr.includes('embed')){\r\n      return url\r\n    } else {\r\n      const target = arr.pop()\r\n      arr.push(target.replace('watch?v=', 'embed/'))\r\n      return arr.join('/')\r\n    }\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nconst isRatio = (ratio) => {\r\n  let num\r\n  switch(typeof(ratio)){\r\n    case \"string\":\r\n      num = parseFloat(ratio)\r\n      if(num===NaN){\r\n        return 1\r\n      }\r\n      break\r\n    case \"number\":\r\n      num = ratio\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  if(num <= 0){\r\n    return 1\r\n  } else if(num <= 1){\r\n    return num\r\n  } else if(num <= 100){\r\n    return num / 100\r\n  } else {\r\n    return 1\r\n  }\r\n}\r\n\r\nconst Prism = ({ children, className }) => {\r\n  const wrapper = css`\r\n    overflow-x: auto;\r\n  `\r\n  const container = css`\r\n    min-width: 100%;\r\n    float: left;\r\n    box-sizing: border-box;\r\n    overflow-x: auto;\r\n  `\r\n\r\n  const code_title = css`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    color: white;\r\n    padding: 0 1em;\r\n    height: 100%;\r\n    width: auto;\r\n    background: #1e1e1e;\r\n  `\r\n\r\n  const lineNo = css`\r\n    display: inline-block;\r\n    width: 2em;\r\n    user-select: none;\r\n    opacity: 0.3;\r\n  `\r\n  const [lang, title] = className.replace(/language-/, '').split(\":title=\")\r\n  const language = lang || \"\"\r\n  return (\r\n    <div css={wrapper}>\r\n      <Highlight {...defaultProps}\r\n        code={children.trim()}\r\n        language={language}\r\n        theme={vsDark}\r\n      >\r\n        {({className, style, tokens, getLineProps, getTokenProps}) => (\r\n          <>\r\n          {title && \r\n          // code_title의 style은 vsc theme에 종속적이다\r\n          <div style={{...style, margin: '1em 0 0 0', background: '#252526', height: '2.4em'}}>\r\n            <div css={code_title}>\r\n              {title}\r\n            </div>\r\n          </div>\r\n        }\r\n          <pre className={className} style={{...style, padding: '20px', margin: title ? '0 0 1em 0' : null}}\r\n            css={container}\r\n          >\r\n            {tokens.map((line, i) => (\r\n              <div key={i} {...getLineProps({line, key: i})}>\r\n                <span css={lineNo}>{i + 1}</span>\r\n                {line.map((token, key) => (\r\n                  <span key={key} {...getTokenProps({token, key})} />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </pre>\r\n          </>\r\n        )}\r\n      </Highlight>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Code = ({ script, language }) => {\r\n  return <Prism className={language}>{script.trim()}</Prism>\r\n}\r\n\r\nconst Youtube = (props) => {\r\n  const url = props.url ? props.url : props.src\r\n  const ratio = props.ratio ? isRatio(props.ratio) : 1\r\n  const src = isWatchSrc(url)\r\n  // youtube embed url이 아니어도 연동이 가능하도록\r\n  // 일반 url을 embed url로 바꿔주는 코드를 작성하였습니다.\r\n  const wrapper = css`\r\n    width: 100%;\r\n    display: grid;\r\n    place-items: center;\r\n  `\r\n  const container = css`\r\n    width: 100%;\r\n    max-width: calc(${post_width} * ${ratio});\r\n  `\r\n  const youtube = css`\r\n    position: relative;\r\n    padding-bottom: 56.25%;\r\n    padding-top: 30px;\r\n    height: 0;\r\n    overflow: hidden;\r\n  `\r\n  const iframe = css`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n  `\r\n  if(src){\r\n    return (\r\n      <div css={wrapper}>\r\n        <div css={container}>\r\n          <div css={youtube}>\r\n            <iframe\r\n              css={iframe}\r\n              src={src}\r\n              frameBorder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n              allowFullScreen\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div/>\r\n  }\r\n}\r\n\r\nconst Columns = ({ children, vr }) => {\r\n  const isVR = vr ? true : false\r\n  const columns = children.filter(child => {\r\n    return child?.props?.mdxType === \"Column\"\r\n  })\r\n  const container = css`\r\n    display: grid;\r\n    margin: 20px 0;\r\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n    grid-gap: 10px;\r\n  `\r\n  return(\r\n    <div css={container}>\r\n      {columns}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst transpileMDXorNot = (target) => {\r\n  if(!target?.type?.displayName){\r\n    const result = micromark(target, {\r\n      extensions: [gfmSyntax()],\r\n      htmlExtensions: [gfmHtml]\r\n    })\r\n    return { __html: result }\r\n  } else {\r\n    return target\r\n  }\r\n}\r\n\r\nconst Column = ({ children }) => {\r\n  let result, results\r\n  if(Array.isArray(children)){\r\n    results = children.map(child => {\r\n      return transpileMDXorNot(child)\r\n    })\r\n  } else {\r\n    result = transpileMDXorNot(children)\r\n  }\r\n  return(\r\n    <div>\r\n      {\r\n        result && result?.type?.displayName\r\n        ? <>{result}</>\r\n        : <div dangerouslySetInnerHTML={result} />\r\n      }\r\n      {\r\n        results && results.map(result => {\r\n          return result?.type?.displayName\r\n          ? <>{result}</>\r\n          : <div dangerouslySetInnerHTML={result} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\nconst Table = ({children}) => {\r\n  const thead = children[0]?.props?.children?.props?.children?.length\r\n  const container = css`\r\n    width: auto;\r\n    overflow-x: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n  `\r\n  const table = css`\r\n    table-layout: fixed;\r\n    width: 100%;\r\n  `\r\n  return (\r\n    <div css={container}>\r\n      <table css={table}>\r\n        {children}\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Blockquote = styled.blockquote`\r\n  padding: 5px 0 5px 20px;\r\n  margin: auto 0;\r\n  color: inherit;\r\n  line-height: 1.8;\r\n  background: ${nightSky.ChineseViolet}44;\r\n  /* background: ${openColor.gray1}; */\r\n  border-left: 10px solid ${nightSky.ChineseViolet};\r\n`\r\n\r\nconst InlineCode = styled.code`\r\n  all: unset;\r\n  font-size: 12px;\r\n  padding: 0 5px;\r\n  padding-bottom: 2px;\r\n  margin: 0 4px;\r\n  background: ${nightSky.ChineseViolet};\r\n  color: ${openColor.gray1};\r\n  border-radius: 5px;\r\n`\r\n\r\nconst Link = styled.a`\r\n  text-decoration: none;\r\n  color: ${nightSky.ChineseViolet};\r\n  padding: 0 1px;\r\n  border-bottom: 2px solid ${nightSky.ChineseViolet};\r\n  transition: color ease 0.5s, border-radius ease 0.5s, background-color ease 0.5s;\r\n  &:hover{\r\n    border-radius: 5px;\r\n    transition: color ease 0.5s, border-radius ease 0.5s, background-color ease 0.5s;\r\n    color: ${openColor.gray1};\r\n    background-color: ${nightSky.ChineseViolet};\r\n  }\r\n`\r\n\r\nconst Line = styled.hr`\r\n  border: none;\r\n  height: 2px;\r\n  border-radius: 2px;\r\n  background: linear-gradient(90deg, rgba(133,89,136,1) 18%, rgba(107,73,132,1) 47%, rgba(72,52,117,1) 79%);\r\n\r\n`\r\n\r\nexport const components = {\r\n  inlineCode: InlineCode,\r\n  a:Link,\r\n  hr:Line,\r\n  code: Prism,\r\n  Code: Code,\r\n  Youtube: Youtube,\r\n  Gist: Gist,\r\n  InlineMath: InlineMath, \r\n  BlockMath: BlockMath,\r\n  Columns: Columns,\r\n  Column: Column,\r\n  table: Table,\r\n  blockquote:Blockquote\r\n}"],"sourceRoot":""}